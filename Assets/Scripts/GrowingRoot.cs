
using DG.Tweening;
using SplineMesh;
using UnityEngine;

namespace Roots
{
    [ExecuteInEditMode]
    [RequireComponent(typeof(Spline))]
    public class GrowingRoot : MonoBehaviour
    {
        private GameObject generated;
        private Spline spline;
        private MeshBender meshBender;

        public Mesh mesh;
        public Material material;
        public Vector3 rotation;
        public Vector3 scale;

        public float startScale = 1;

        private void OnEnable() {
            Init();
        }

        [ContextMenu("Grow")]
        private void Grow()
        {
            DOVirtual.Float(0, 1, 2f, Contort);
        }

        [ContextMenu("Add Node")]
        private void AddNodeAndGrow()
        {
            var lastNode = spline.nodes[^1];
            var prevToLastNode = spline.nodes[^2];

            var posDiff = lastNode.Position - prevToLastNode.Position;
            
            spline.AddNode(new SplineNode(lastNode.Position + posDiff, -lastNode.Direction)
            {
                Up = lastNode.Up,
                Roll = prevToLastNode.Roll,
                Scale = lastNode.Scale
            });
        }

        private void Contort(float alpha) {
            float nodeDistance = 0;
            int i = 0;
            foreach (var n in spline.nodes) {
                float nodeDistanceRate = nodeDistance / spline.Length;
                float nodeScale = startScale * (alpha - nodeDistanceRate);
                n.Scale = new Vector2(nodeScale, nodeScale);
                if (i < spline.curves.Count) {
                    nodeDistance += spline.curves[i++].Length;
                }
            }

            if (generated != null) {
                meshBender.SetInterval(spline, 0, spline.Length * alpha);
                meshBender.ComputeIfNeeded();
            }
        }

        private void Init() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject,
                typeof(MeshFilter),
                typeof(MeshRenderer),
                typeof(MeshBender));

            generated.GetComponent<MeshRenderer>().material = material;

            meshBender = generated.GetComponent<MeshBender>();
            spline = GetComponent<Spline>();

            meshBender.Source = SourceMesh.Build(mesh)
                .Rotate(Quaternion.Euler(rotation))
                .Scale(scale);
            meshBender.Mode = MeshBender.FillingMode.StretchToInterval;
            meshBender.SetInterval(spline, 0, 0.01f);
        }
    }
}
